# ddev default (PHP project type) config

# If you want to take over this file and customize it, remove the line above
# and ddev will respect it and won't overwrite the file.
# See https://ddev.readthedocs.io/en/stable/users/extend/customization-extendibility/#providing-custom-nginx-configuration

server {
    listen 80 default_server;
    listen 443 ssl default_server;

    # If the origin doesn't match, we won't send *any* access control headers back because none of the 
    # variables will be set.
    #
    # This is convenient instead of map because we can group all the header values together instead of
    # searching through the NGiNX config for them. 
    # 
    # Also, all the values are used again in the preflight response.
    if ($http_origin ~ ^https?://(.*\.)?dot-all-2022.fostercommerce.test(:\d+)?$) {
        set $allow_origin $http_origin;
        set $expose_headers "Content-Encoding,Length,Authorization";
        set $allow_methods "GET, POST, DELETE, OPTIONS, HEAD";
        set $allow_headers "Authorization, Origin, x-csrf-token, Cache-Control, X-Requested-With, Content-Type, Accept, DNT, User-Agent, If-Modified-Since, Range";
        set $allow_credentials "true";
    }

    # Always return these CORS headers.
    # 
    # Not really necessary for GET requests.
    add_header "Access-Control-Allow-Origin" $allow_origin always;
    add_header 'Access-Control-Expose-Headers' $expose_headers always;
    add_header "Access-Control-Allow-Credentials" $allow_credentials always;

    root /var/www/html/web;

    ssl_certificate /etc/ssl/certs/master.crt;
    ssl_certificate_key /etc/ssl/certs/master.key;

    include /etc/nginx/monitoring.conf;

    index index.php index.htm index.html;

    # Disable sendfile as per https://docs.vagrantup.com/v2/synced-folders/virtualbox.html
    sendfile off;
    error_log /dev/stdout info;
    access_log /var/log/nginx/access.log;

    location / {
        absolute_redirect off;
        try_files $uri $uri/ /index.php?$query_string;

        # For preflight requests, tell the client everything it needs to know.
        if ($request_method = OPTIONS ) {
            # The headers need to be added here again because: 
            # 
            # > These directives are inherited from the previous configuration level if and only if there are no add_header directives defined on the current level. 
            # 
            # From: http://nginx.org/en/docs/http/ngx_http_headers_module.html#add_header
            add_header "Access-Control-Allow-Origin" $allow_origin always;
            add_header "Access-Control-Allow-Methods" $allow_methods always;
            add_header "Access-Control-Allow-Headers" $allow_headers always;
            add_header 'Access-Control-Expose-Headers' $expose_headers always;
            add_header "Access-Control-Allow-Credentials" $allow_credentials always;
            return 200;
        }
    }

    # pass the PHP scripts to FastCGI server listening on socket
    location ~ \.php$ {
        try_files $uri =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass unix:/run/php-fpm.sock;
        fastcgi_buffers 16 16k;
        fastcgi_buffer_size 32k;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param SCRIPT_NAME $fastcgi_script_name;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_intercept_errors off;
        # fastcgi_read_timeout should match max_execution_time in php.ini
        fastcgi_read_timeout 10m;
        fastcgi_param SERVER_NAME $host;
        fastcgi_param HTTPS $fcgi_https;

        # Hide any CORS headers returned by Craft - The craft graphql controller sets these.
        fastcgi_hide_header "Access-Control-Allow-Credentials";
        fastcgi_hide_header "Access-Control-Allow-Headers";
        fastcgi_hide_header "Access-Control-Allow-Origin";
    }

    # Prevent clients from accessing hidden files (starting with a dot)
    # This is particularly important if you store .htpasswd files in the site hierarchy
    # Access to `/.well-known/` is allowed.
    # https://www.mnot.net/blog/2010/04/07/well-known
    # https://tools.ietf.org/html/rfc5785
    location ~* /\.(?!well-known\/) {
        deny all;
    }

    # Prevent clients from accessing to backup/config/source files
    location ~* (?:\.(?:bak|conf|dist|fla|in[ci]|log|psd|sh|sql|sw[op])|~)$ {
        deny all;
    }

    include /etc/nginx/common.d/*.conf;
    include /mnt/ddev_config/nginx/*.conf;
}
